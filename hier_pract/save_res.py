"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ–µ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏, –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–º–∞–Ω–¥—ã
"""

import json
import numpy as np
import os
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import time
from collections import defaultdict

@dataclass
class RobotState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    id: str
    team: str
    x: float
    y: float
    hp: float
    alive: bool
    target_enemy: int
    move_action: List[float]
    aim_action: List[float]
    fire_action: bool
    command_type: Optional[str] = None
    command_target: Optional[str] = None
    command_priority: Optional[int] = None

@dataclass
class BattleFrame:
    """–ö–∞–¥—Ä –±–æ—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤"""
    timestamp: float
    step: int
    robots: List[RobotState]
    global_state: Dict[str, Any]
    events: List[Dict[str, Any]]  # –í—ã—Å—Ç—Ä–µ–ª—ã, –ø–æ–ø–∞–¥–∞–Ω–∏—è, —Å–º–µ—Ä—Ç–∏

@dataclass
class BattleRecord:
    """–ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å –±–æ—è"""
    battle_id: str
    start_time: float
    end_time: float
    red_team_size: int
    blue_team_size: int
    winner: str
    frames: List[BattleFrame]
    final_stats: Dict[str, Any]

class BattleRecorder:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ–µ–≤ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self, output_dir: str = "./battle_recordings"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
        self.current_battle: Optional[BattleRecord] = None
        self.current_frame_events: List[Dict[str, Any]] = []
        self.frame_counter = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        self.battle_stats = defaultdict(list)
        
    def start_battle(self, battle_id: str, red_size: int, blue_size: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –±–æ—è"""
        self.current_battle = BattleRecord(
            battle_id=battle_id,
            start_time=time.time(),
            end_time=0,
            red_team_size=red_size,
            blue_team_size=blue_size,
            winner="",
            frames=[],
            final_stats={}
        )
        self.current_frame_events = []
        self.frame_counter = 0
        print(f"üé¨ Started recording battle: {battle_id}")
    
    def record_frame(self, 
                    observations: Dict[str, Dict],
                    actions: Dict[str, Dict],
                    rewards: Dict[str, float],
                    infos: Dict[str, Dict],
                    global_state: Optional[Dict] = None):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä –±–æ—è"""
        
        if not self.current_battle:
            return
        
        robots = []
        
        for agent_id, obs in observations.items():
            if agent_id.startswith(("red_", "blue_")):
                team = "red" if agent_id.startswith("red_") else "blue"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–∞ –≤ self[0:2])
                position = obs.get("self", np.zeros(12))[:2]
                hp_normalized = obs.get("self", np.zeros(12))[2] if len(obs.get("self", [])) > 2 else 1.0
                hp = hp_normalized * 100.0  # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º HP
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                action = actions.get(agent_id, {})
                target_enemy = action.get("target", 0)
                move_action = action.get("move", [0.0, 0.0])
                aim_action = action.get("aim", [0.0, 0.0])
                fire_action = action.get("fire", 0) > 0.5
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã)
                info = infos.get(agent_id, {})
                command_type = info.get("command_type")
                command_target = info.get("command_target") 
                command_priority = info.get("command_priority")
                
                robot_state = RobotState(
                    id=agent_id,
                    team=team,
                    x=float(position[0]) * 30 + 300,  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                    y=float(position[1]) * 30 + 200,
                    hp=float(hp),
                    alive=hp > 0,
                    target_enemy=int(target_enemy),
                    move_action=list(move_action),
                    aim_action=list(aim_action),
                    fire_action=fire_action,
                    command_type=command_type,
                    command_target=command_target,
                    command_priority=command_priority
                )
                
                robots.append(robot_state)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                if fire_action:
                    self.current_frame_events.append({
                        "type": "fire",
                        "shooter": agent_id,
                        "target_index": target_enemy,
                        "timestamp": time.time()
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å (HP —É–ø–∞–ª–æ –¥–æ 0 –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ)
                if hp <= 0 and len(self.current_battle.frames) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –∂–∏–≤ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–∞–¥—Ä–µ
                    prev_frame = self.current_battle.frames[-1]
                    prev_robot = next((r for r in prev_frame.robots if r.id == agent_id), None)
                    if prev_robot and prev_robot.alive:
                        self.current_frame_events.append({
                            "type": "death",
                            "robot": agent_id,
                            "timestamp": time.time()
                        })
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä
        frame = BattleFrame(
            timestamp=time.time(),
            step=self.frame_counter,
            robots=robots,
            global_state=global_state or {},
            events=self.current_frame_events.copy()
        )
        
        self.current_battle.frames.append(frame)
        self.current_frame_events = []
        self.frame_counter += 1
    
    def end_battle(self, winner: str, final_stats: Optional[Dict] = None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–ø–∏—Å—å –±–æ—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç"""
        if not self.current_battle:
            return
        
        self.current_battle.end_time = time.time()
        self.current_battle.winner = winner
        self.current_battle.final_stats = final_stats or {}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._calculate_battle_stats()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self._save_battle()
        
        print(f"üèÅ Finished recording battle: {self.current_battle.battle_id}")
        print(f"   Duration: {self.current_battle.end_time - self.current_battle.start_time:.1f}s")
        print(f"   Frames: {len(self.current_battle.frames)}")
        print(f"   Winner: {winner}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.battle_stats["durations"].append(
            self.current_battle.end_time - self.current_battle.start_time
        )
        self.battle_stats["winners"].append(winner)
        self.battle_stats["frame_counts"].append(len(self.current_battle.frames))
        
        self.current_battle = None
    
    def _calculate_battle_stats(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è"""
        if not self.current_battle or not self.current_battle.frames:
            return
        
        stats = {
            "total_shots": 0,
            "total_deaths": 0,
            "team_stats": {"red": {}, "blue": {}},
            "average_distance": 0,
            "action_distribution": defaultdict(int)
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        for frame in self.current_battle.frames:
            for event in frame.events:
                if event["type"] == "fire":
                    stats["total_shots"] += 1
                elif event["type"] == "death":
                    stats["total_deaths"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        for team in ["red", "blue"]:
            team_robots = [r for r in self.current_battle.frames[-1].robots if r.team == team]
            alive_count = sum(1 for r in team_robots if r.alive)
            total_hp = sum(r.hp for r in team_robots if r.alive)
            
            stats["team_stats"][team] = {
                "alive_count": alive_count,
                "total_hp": total_hp,
                "initial_count": self.current_battle.red_team_size if team == "red" else self.current_battle.blue_team_size
            }
        
        # –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        if len(self.current_battle.frames) > 0:
            distances = []
            for frame in self.current_battle.frames[::5]:  # –ö–∞–∂–¥—ã–π 5-–π –∫–∞–¥—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
                red_robots = [r for r in frame.robots if r.team == "red" and r.alive]
                blue_robots = [r for r in frame.robots if r.team == "blue" and r.alive]
                
                for red in red_robots:
                    for blue in blue_robots:
                        dist = np.sqrt((red.x - blue.x)**2 + (red.y - blue.y)**2)
                        distances.append(dist)
            
            if distances:
                stats["average_distance"] = float(np.mean(distances))
        
        self.current_battle.final_stats.update(stats)
    
    def _save_battle(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –±–æ—è –≤ JSON —Ñ–∞–π–ª"""
        if not self.current_battle:
            return
        
        filename = f"battle_{self.current_battle.battle_id}_{int(self.current_battle.start_time)}.json"
        filepath = os.path.join(self.output_dir, filename)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON
        battle_dict = asdict(self.current_battle)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(battle_dict, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Saved battle recording: {filepath}")
    
    def export_for_web_visualizer(self, battle_files: Optional[List[str]] = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        
        if battle_files is None:
            # –ë–µ—Ä–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            battle_files = [
                f for f in os.listdir(self.output_dir) 
                if f.startswith("battle_") and f.endswith(".json")
            ]
        
        if not battle_files:
            print("No battle files found for export")
            return ""
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        latest_file = max(battle_files, key=lambda f: os.path.getmtime(os.path.join(self.output_dir, f)))
        filepath = os.path.join(self.output_dir, latest_file)
        
        with open(filepath, 'r', encoding='utf-8') as f:
            battle_data = json.load(f)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        web_data = {
            "battle_info": {
                "id": battle_data["battle_id"],
                "duration": battle_data["end_time"] - battle_data["start_time"],
                "winner": battle_data["winner"],
                "red_team_size": battle_data["red_team_size"],
                "blue_team_size": battle_data["blue_team_size"]
            },
            "frames": [],
            "statistics": battle_data.get("final_stats", {})
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä—ã (–º–æ–∂–µ–º –≤–∑—è—Ç—å –∫–∞–∂–¥—ã–π N-–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        frame_step = max(1, len(battle_data["frames"]) // 1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 –∫–∞–¥—Ä–æ–≤
        
        for i, frame in enumerate(battle_data["frames"][::frame_step]):
            web_frame = {
                "timestamp": frame["timestamp"],
                "step": frame["step"],
                "robots": {},
                "events": frame["events"]
            }
            
            for robot in frame["robots"]:
                web_frame["robots"][robot["id"]] = {
                    "team": robot["team"],
                    "x": robot["x"],
                    "y": robot["y"],
                    "hp": robot["hp"],
                    "alive": robot["alive"],
                    "target": robot["target_enemy"],
                    "move": robot["move_action"],
                    "aim": robot["aim_action"],
                    "fire": robot["fire_action"],
                    "command": {
                        "type": robot.get("command_type"),
                        "target": robot.get("command_target"),
                        "priority": robot.get("command_priority", 1)
                    }
                }
            
            web_data["frames"].append(web_frame)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        web_export_path = os.path.join(self.output_dir, "latest_battle_web.json")
        with open(web_export_path, 'w', encoding='utf-8') as f:
            json.dump(web_data, f, ensure_ascii=False, indent=2)
        
        print(f"üåê Exported for web visualizer: {web_export_path}")
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        html_path = self._create_standalone_html(web_data)
        return html_path
    
    def _create_standalone_html(self, battle_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π HTML —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –±–æ—è"""
        
        html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Battle Replay: {battle_id}</title>
    <style>
        body {{ margin: 0; padding: 20px; font-family: Arial, sans-serif; background: #1a1a2e; color: white; }}
        .header {{ text-align: center; margin-bottom: 20px; }}
        .controls {{ text-align: center; margin-bottom: 20px; }}
        .arena {{ width: 600px; height: 400px; border: 2px solid #fff; margin: 0 auto; position: relative; background: #16213e; }}
        .robot {{ position: absolute; width: 16px; height: 16px; border-radius: 50%; border: 2px solid; transition: all 0.1s; }}
        .red-robot {{ background: #ff4444; border-color: #ff6666; }}
        .blue-robot {{ background: #4444ff; border-color: #6666ff; }}
        .robot.dead {{ opacity: 0.3; background: #666 !important; }}
        .stats {{ margin-top: 20px; text-align: center; }}
        button {{ padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; background: #4CAF50; color: white; cursor: pointer; }}
        button:hover {{ background: #45a049; }}
        .timeline {{ width: 80%; margin: 20px auto; }}
        .timeline input {{ width: 100%; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üé¨ Battle Replay: {battle_id}</h1>
        <p>Winner: {winner} | Duration: {duration:.1f}s | Teams: {red_size}v{blue_size}</p>
    </div>
    
    <div class="controls">
        <button onclick="playPause()">‚èØ Play/Pause</button>
        <button onclick="restart()">‚èÆ Restart</button>
        <button onclick="stepForward()">‚è≠ Step</button>
        <span>Speed: </span>
        <input type="range" id="speedSlider" min="0.1" max="3" value="1" step="0.1" onchange="updateSpeed()">
        <span id="speedDisplay">1.0x</span>
    </div>
    
    <div class="arena" id="arena"></div>
    
    <div class="timeline">
        <input type="range" id="frameSlider" min="0" max="{max_frame}" value="0" onchange="jumpToFrame()">
        <div>Frame: <span id="frameDisplay">0</span> / {max_frame}</div>
    </div>
    
    <div class="stats" id="stats">
        <div>Red HP: <span id="redHP">100</span> | Blue HP: <span id="blueHP">100</span></div>
    </div>

    <script>
        const battleData = {battle_data_json};
        
        let currentFrame = 0;
        let isPlaying = false;
        let playSpeed = 1.0;
        let playInterval = null;
        
        function initializeArena() {{
            const arena = document.getElementById('arena');
            arena.innerHTML = '';
            
            // Create robot elements based on first frame
            if (battleData.frames.length > 0) {{
                const firstFrame = battleData.frames[0];
                for (const robotId in firstFrame.robots) {{
                    const robot = firstFrame.robots[robotId];
                    const element = document.createElement('div');
                    element.id = robotId;
                    element.className = `robot ${{robot.team}}-robot`;
                    element.title = robotId;
                    arena.appendChild(element);
                }}
            }}
            
            updateFrame(0);
        }}
        
        function updateFrame(frameIndex) {{
            frameIndex = Math.max(0, Math.min(frameIndex, battleData.frames.length - 1));
            currentFrame = frameIndex;
            
            const frame = battleData.frames[frameIndex];
            
            // Update robot positions and states
            for (const robotId in frame.robots) {{
                const robot = frame.robots[robotId];
                const element = document.getElementById(robotId);
                if (element) {{
                    element.style.left = robot.x + 'px';
                    element.style.top = robot.y + 'px';
                    element.className = `robot ${{robot.team}}-robot${{!robot.alive ? ' dead' : ''}}`;
                    element.title = `${{robotId}}: HP=${{robot.hp.toFixed(1)}} ${{robot.command.type || ''}}`;
                }}
            }}
            
            // Update stats
            const redHP = Object.values(frame.robots)
                .filter(r => r.team === 'red' && r.alive)
                .reduce((sum, r) => sum + r.hp, 0);
            const blueHP = Object.values(frame.robots)
                .filter(r => r.team === 'blue' && r.alive)
                .reduce((sum, r) => sum + r.hp, 0);
            
            document.getElementById('redHP').textContent = redHP.toFixed(1);
            document.getElementById('blueHP').textContent = blueHP.toFixed(1);
            document.getElementById('frameDisplay').textContent = frameIndex;
            document.getElementById('frameSlider').value = frameIndex;
        }}
        
        function playPause() {{
            isPlaying = !isPlaying;
            if (isPlaying) {{
                playInterval = setInterval(() => {{
                    if (currentFrame >= battleData.frames.length - 1) {{
                        isPlaying = false;
                        clearInterval(playInterval);
                        return;
                    }}
                    updateFrame(currentFrame + 1);
                }}, 100 / playSpeed);
            }} else {{
                clearInterval(playInterval);
            }}
        }}
        
        function restart() {{
            isPlaying = false;
            clearInterval(playInterval);
            updateFrame(0);
        }}
        
        function stepForward() {{
            if (currentFrame < battleData.frames.length - 1) {{
                updateFrame(currentFrame + 1);
            }}
        }}
        
        function jumpToFrame() {{
            const frameIndex = parseInt(document.getElementById('frameSlider').value);
            updateFrame(frameIndex);
        }}
        
        function updateSpeed() {{
            playSpeed = parseFloat(document.getElementById('speedSlider').value);
            document.getElementById('speedDisplay').textContent = playSpeed.toFixed(1) + 'x';
        }}
        
        // Initialize on load
        window.addEventListener('load', initializeArena);
    </script>
</body>
</html>
        """.format(
            battle_id=battle_data["battle_info"]["id"],
            winner=battle_data["battle_info"]["winner"],
            duration=battle_data["battle_info"]["duration"],
            red_size=battle_data["battle_info"]["red_team_size"],
            blue_size=battle_data["battle_info"]["blue_team_size"],
            max_frame=len(battle_data["frames"]) - 1,
            battle_data_json=json.dumps(battle_data)
        )
        
        html_path = os.path.join(self.output_dir, f"replay_{battle_data['battle_info']['id']}.html")
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_template)
        
        print(f"üé¨ Created battle replay: {html_path}")
        return html_path
    
    def get_summary_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –±–æ–µ–≤"""
        if not self.battle_stats["durations"]:
            return {"message": "No battles recorded yet"}
        
        durations = np.array(self.battle_stats["durations"])
        winners = self.battle_stats["winners"]
        
        win_counts = {}
        for winner in winners:
            win_counts[winner] = win_counts.get(winner, 0) + 1
        
        return {
            "total_battles": len(durations),
            "average_duration": float(np.mean(durations)),
            "min_duration": float(np.min(durations)),
            "max_duration": float(np.max(durations)),
            "win_rate_by_team": win_counts,
            "average_frames": float(np.mean(self.battle_stats["frame_counts"])),
        }


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Arena Environment
class RecordingArenaWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è ArenaEnv, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–æ–∏"""
    
    def __init__(self, base_env, recorder: BattleRecorder):
        self.env = base_env
        self.recorder = recorder
        self.battle_counter = 0
        self.current_observations = {}
        self.current_actions = {}
        
    def reset(self, **kwargs):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–æ–π –µ—Å–ª–∏ –±—ã–ª
        if self.recorder.current_battle is not None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ HP
            red_agents = [aid for aid in self.current_observations.keys() if aid.startswith("red_")]
            blue_agents = [aid for aid in self.current_observations.keys() if aid.startswith("blue_")]
            
            red_hp = sum(self.env._hp.get(aid, 0) for aid in red_agents if self.env._is_alive(aid))
            blue_hp = sum(self.env._hp.get(aid, 0) for aid in blue_agents if self.env._is_alive(aid))
            
            winner = "red" if red_hp > blue_hp else "blue" if blue_hp > red_hp else "draw"
            self.recorder.end_battle(winner)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –±–æ–π
        obs, info = self.env.reset(**kwargs)
        
        self.battle_counter += 1
        red_size = len([aid for aid in obs.keys() if aid.startswith("red_")])
        blue_size = len([aid for aid in obs.keys() if aid.startswith("blue_")])
        
        battle_id = f"battle_{self.battle_counter:04d}"
        self.recorder.start_battle(battle_id, red_size, blue_size)
        
        self.current_observations = obs
        self.current_actions = {}
        
        return obs, info
    
    def step(self, action_dict):
        self.current_actions = action_dict
        
        obs, rewards, terms, truncs, infos = self.env.step(action_dict)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä
        self.recorder.record_frame(
            observations=self.current_observations,
            actions=self.current_actions,
            rewards=rewards,
            infos=infos,
            global_state={
                "timestep": getattr(self.env, '_t', 0),
                "red_hp": sum(self.env._hp.get(aid, 0) for aid in self.env._agents_red),
                "blue_hp": sum(self.env._hp.get(aid, 0) for aid in self.env._agents_blue),
            }
        )
        
        self.current_observations = obs
        return obs, rewards, terms, truncs, infos
    
    def __getattr__(self, name):
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∫ base env
        return getattr(self.env, name)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def demo_battle_recording():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—è"""
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä
    recorder = BattleRecorder("./demo_battles")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    from arena_env import ArenaEnv
    env = ArenaEnv({"ally_choices": [2], "enemy_choices": [2], "episode_len": 50})
    wrapped_env = RecordingArenaWrapper(env, recorder)
    
    print("üéÆ Starting demo battle recording...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω –±–æ–π
    obs, _ = wrapped_env.reset()
    
    for step in range(50):
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        actions = {}
        for agent_id, agent_obs in obs.items():
            actions[agent_id] = {
                "target": np.random.randint(0, env.max_enemies),
                "move": np.random.uniform(-0.5, 0.5, 2),
                "aim": np.random.uniform(-0.5, 0.5, 2),
                "fire": np.random.randint(0, 2),
            }
        
        obs, rewards, terms, truncs, infos = wrapped_env.step(actions)
        
        if terms.get("__all__") or truncs.get("__all__"):
            break
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    obs, _ = wrapped_env.reset()  # –≠—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç —Ç–µ–∫—É—â–∏–π –±–æ–π
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–µ–±-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    html_path = recorder.export_for_web_visualizer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = recorder.get_summary_statistics()
    print("\nüìä Recording Statistics:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print(f"\nüé¨ Open {html_path} in your browser to view the battle replay!")
    
    return html_path


if __name__ == "__main__":
    demo_battle_recording()